import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'se.thinkcode.cucumber-runner' version '0.0.11'
    //id "io.qameta.allure" version "2.10.0"
}

ext {
    junitVersion = '5.8.2'
    cucumberVersion = '7.3.4' // this is the last version which supports the JDK 8
    nexusUrl = "https://repo.host/nexus/repository"
    username = System.getenv('GLOBAL_NEXUS_E')
    password = System.getenv('GLOBAL_NEXUS_ACC_PSW')
}

group 'bdd.cucumber'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo1.maven.org/maven2/" }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://packages.confluent.io/maven/" }
    maven { url "${nexusUrl}/dto-releases/" }
    maven {
        credentials {
            username "${username}"
            password "${password}"
        }
        url "${nexusUrl}/module-release"
    }
}

dependencies {
    // these 2 dependencies are required to run tests with JUnit > gradle test
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.junit.vintage:junit-vintage-engine:4.12.1'
 	
    implementation "io.cucumber:cucumber-java:${cucumberVersion}"
    implementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    implementation "io.cucumber:cucumber-picocontainer:${cucumberVersion}"
    implementation "io.cucumber:cucumber-gherkin:${cucumberVersion}"
    implementation "io.cucumber:cucumber-plugin:${cucumberVersion}"

    implementation "io.cucumber:cucumber-testng:${cucumberVersion}"
    implementation 'org.testng:testng:6.14.3!!' // !! is short hand for strict version

    // implementation 'io.qameta.allure:allure-cucumber7-jvm:2.18.1'
    //allureCommandline(files("/Users/rama.m_vlb/SIT/allure-commandline-2.18.1.zip"))
    //allureRawResultElements(files(layout.buildDirectory.dir("custom-allure-results")))
    // or
    //allureRawResultElements(files("$buildDir/custom-allure-results"))
}

configurations {
	cucumberRuntime {
		extendsFrom testImplementation
	}
}


// It runs the cucumber test through JUnit runner
// The command to run >gradle test
tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED
    }

    systemProperties(project.gradle.startParameter.systemPropertiesArgs)
}

// task from plugin se.thinkcode.cucumber-runner
// The command to run >gradle cucumber
cucumber {
    // threads = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    main = 'io.cucumber.core.cli.Main'
    featurePath = 'src/test/resources/features'
    glue = 'bdd.cucumber.demo.hooks'
    extraGlues = ["bdd.cucumber.demo.steps"]
    plugin = ["pretty", "html:$buildDir/cmd-cucumber-plugin-report.html"]
    tags = ''
    dryRun = true
}

// custom runner to run cucumber tests
// The command to run >gradle cucumberTest
task cucumberTest() {
	// The group and description gives information on console while executing.
	group 'Cucumber Tests Execution'
    description 'Executing the cucumber tests with the custom gradle task'
    
   	dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
            		// '--threads', 2,
                    //'--plugin', 'pretty',
                    "--plugin", "html:$buildDir/cmd-cucumberTest-report.html", // the $buildDir will only resolve with double quotes ""
                    '--glue', 'bdd.cucumber.demo.hooks',
                    '--glue', 'bdd.cucumber.demo.steps',
                    '--dry-run',
                    'src/test/resources/features']
        }
    }
}
// while running the test cases through programatically (from main method) to make available the step definitions
sourceSets {
	main {
		java {
			srcDirs 'src/main/java', 'generated-sources/main/java', 'src/test/java'
		}
	}
}

compileJava {
	options.encoding = "UTF-8"
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.incremental = true	 
}

task myJavadoc(type: Javadoc) {
	source = sourceSets.main.allJava
	failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

artifacts {
	archives sourcesJar
	archives javadocJar
}
